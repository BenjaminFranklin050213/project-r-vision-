{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from defusedxml.ElementTree import parse\n",
    "import json\n",
    "\n",
    "def parse_oval(file_path):\n",
    "    try:\n",
    "        tree = parse(file_path)\n",
    "        root = tree.getroot()\n",
    "\n",
    "        definitions = root.findall('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}definition')\n",
    "\n",
    "        simplified_data = []\n",
    "        for definition in definitions:\n",
    "            definition_id = definition.get('id')\n",
    "            title = definition.find('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}title').text\n",
    "\n",
    "            cve_elements = definition.findall('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}metadata/{http://oval.mitre.org/XMLSchema/oval-definitions-5}reference[@source=\"CVE\"]')\n",
    "            cve_list = [cve_element.get('ref_id') for cve_element in cve_elements] if cve_elements else None\n",
    "\n",
    "            description_element = definition.find('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}description')\n",
    "            description = description_element.text if description_element is not None else None\n",
    "\n",
    "            criteria_list = []\n",
    "            criteria_elements = definition.findall('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}criteria') \n",
    "            for criteria in criteria_elements:\n",
    "                criteria_data = extract_criteria(criteria)\n",
    "                if criteria_data:\n",
    "                    criteria_list.append(criteria_data)\n",
    "\n",
    "            simplified_data.append({\n",
    "                'id': definition_id,\n",
    "                'title': title,\n",
    "                'cve': cve_list if cve_list else [],\n",
    "                'description': description,\n",
    "                'criteria': criteria_list\n",
    "            })\n",
    "\n",
    "        simplified_json = json.dumps(simplified_data, indent=4)\n",
    "        print(simplified_json)\n",
    "\n",
    "        return simplified_data\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Ошибка при обработке файла: {e}\")\n",
    "        return None\n",
    "\n",
    "def extract_criteria(criteria_element):\n",
    "    criteria_data = {'operator': criteria_element.get('operator')}\n",
    "    criteria_list = []\n",
    "\n",
    "    for criterion in criteria_element.findall('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}criterion'):\n",
    "        criterion_data = {\n",
    "            'comment': criterion.get('comment'),\n",
    "            'test_ref': criterion.get('test_ref')\n",
    "        }\n",
    "        criteria_list.append(criterion_data)\n",
    "\n",
    "    sub_criteria_elements = criteria_element.findall('.//{http://oval.mitre.org/XMLSchema/oval-definitions-5}criteria')\n",
    "    for sub_criteria_element in sub_criteria_elements:\n",
    "        sub_criteria_data = extract_criteria(sub_criteria_element)\n",
    "        if sub_criteria_data:\n",
    "            criteria_list.append(sub_criteria_data)\n",
    "\n",
    "    if criteria_list:\n",
    "        criteria_data['criteria'] = criteria_list\n",
    "\n",
    "    return criteria_data\n",
    "\n",
    "\n",
    "file_path = '1.oval.xml'\n",
    "parse_oval(file_path)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
